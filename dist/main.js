(()=>{"use strict";var e={192:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600&display=swap);"]),a.push([e.id,"*{margin:0;padding:0;box-sizing:border-box;font-family:'Nunito', sans-serif}li{list-style:none}body{font-size:1rem;background:#f5fcfc}h1{text-transform:capitalize;font-weight:600;font-size:4rem}img{width:5rem;border-radius:0.5rem}label{display:block;color:#7aacfc;margin:0.5rem 0}.intro{color:#1a1d26;font-size:1.2rem}.mx-2{margin:1.5rem 0}#hide{display:none}#show{display:block}#inline{display:inline-block}.d-flex{display:flex}.d-block{display:block}.space-bw{justify-content:space-between}.align-cn{align-items:center}.text-center{text-align:center}.error,.success{color:#fff;width:50%;padding:1.5rem;margin:5px auto;border-radius:0.4rem}.error{background:#f56a79}.success{background:#557571}#search-city-form,.results-section{margin:3rem auto;width:35%;padding:1rem 1.5rem;border-radius:0.4rem;background:#fff}header{height:60vh}input{width:100%;margin:0.3rem 0;padding:1rem 1.5rem;font-size:1.1rem;border-radius:0.4rem;border:1px solid #c9c4c4;cursor:pointer;color:#989494}input:focus{outline:none;box-shadow:0 0 11px 0 #c9c4c4;padding:1rem 1.5rem;color:#989494}input:hover{background:#f5fcfc}#form-search{background:#8ea3fc;border:0;color:#fff}.country-name{font-size:2.5rem}.btn-container{width:50%;margin:3rem 33%;display:none}.btn-temp2{display:none}.results-section{background:#8ea3fc;margin:5rem auto;color:#fff;display:none}.results-section span,.results-section p{font-size:1.3rem;text-transform:capitalize}#country-flag{margin-left:20rem;width:3rem}#country-image{width:7rem;height:5rem}#temperature{font-size:5rem}#temperature::after{content:\"\\00b0\"}.btn{text-align:center;padding:1rem 1.5rem;border-radius:0.5rem;background-image:linear-gradient(to bottom, #b0a4ff, #806ef8);color:#fff;border:0;font-size:1rem;outline:none}.page-title{color:#8e929b;margin:3rem auto 2rem auto}\n","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAMA,EACE,QAAS,CACT,SAAU,CACV,qBAAsB,CACtB,gCAAiC,CAClC,GAGC,eAAgB,CACjB,KAGC,cAAe,CACf,kBAAmB,CACpB,GAGC,yBAA0B,CAC1B,eAAgB,CAChB,cAAe,CAChB,IAGC,UAAW,CACX,oBAAqB,CACtB,MAGC,aAAc,CACd,aAhCW,CAiCX,eAAgB,CACjB,OAGC,aAAc,CACd,gBAAiB,CAClB,MAGC,eAAgB,CACjB,MAGC,YAAa,CACd,MAGC,aAAc,CACf,QAGC,oBAAqB,CACtB,QAGC,YAAa,CACd,SAGC,aAAc,CACf,UAGC,6BAA8B,CAC/B,UAGC,kBAAmB,CACpB,aAGC,iBAAkB,CACnB,gBAIC,UAhFS,CAiFT,SAAU,CACV,cAAe,CACf,eAAgB,CAChB,oBAAqB,CACtB,OAGC,kBAAmB,CACpB,SAGC,kBAAmB,CACpB,mCAIC,gBAAiB,CACjB,SAAU,CACV,mBAAoB,CACpB,oBAAqB,CACrB,eArGS,CAsGV,OAGC,WAAY,CACb,MAGC,UAAW,CACX,eAAgB,CAChB,mBAAoB,CACpB,gBAAiB,CACjB,oBAAqB,CACrB,wBAAyB,CACzB,cAAe,CACf,aAAyB,CAR3B,YAWI,YAAa,CACb,6BAA8B,CAC9B,mBAAoB,CACpB,aAAyB,CAd7B,YAkBI,kBAAmB,CACpB,aAID,kBAAmB,CACnB,QAAS,CACT,UArIS,CAsIV,cAGC,gBAAiB,CAClB,eAGC,SAAU,CACV,eAAgB,CAChB,YAAa,CACd,WAGC,YAAa,CACd,iBAGC,kBAAmB,CACnB,gBAAiB,CACjB,UAAW,CACX,YAAa,CAJf,yCAQI,gBAAiB,CACjB,yBAA0B,CAC3B,cAID,iBAAkB,CAClB,UAAW,CACZ,eAGC,UAAW,CACX,WAAY,CACb,aAGC,cAAe,CADjB,oBAII,eAAgB,CACjB,KAID,iBAAkB,CAClB,mBAAoB,CACpB,oBAAqB,CACrB,6DAA8D,CAC9D,UA1LS,CA2LT,QAAS,CACT,cAAe,CACf,YAAa,CACd,YAGC,aAAc,CACd,0BAA2B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600&display=swap');\n\n$white:#fff;\n$blue:#7aacfc;\n$text-color:#2a2c34;\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: 'Nunito', sans-serif;\n}\n\nli {\n  list-style: none;\n}\n\nbody {\n  font-size: 1rem;\n  background: #f5fcfc;\n}\n\nh1 {\n  text-transform: capitalize;\n  font-weight: 600;\n  font-size: 4rem;\n}\n\nimg {\n  width: 5rem;\n  border-radius: 0.5rem;\n}\n\nlabel {\n  display: block;\n  color: $blue;\n  margin: 0.5rem 0;\n}\n\n.intro {\n  color: #1a1d26;\n  font-size: 1.2rem;\n}\n\n.mx-2 {\n  margin: 1.5rem 0;\n}\n\n#hide {\n  display: none;\n}\n\n#show {\n  display: block;\n}\n\n#inline {\n  display: inline-block;\n}\n\n.d-flex {\n  display: flex;\n}\n\n.d-block {\n  display: block;\n}\n\n.space-bw {\n  justify-content: space-between;\n}\n\n.align-cn {\n  align-items: center;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.error,\n.success {\n  color: $white;\n  width: 50%;\n  padding: 1.5rem;\n  margin: 5px auto;\n  border-radius: 0.4rem;\n}\n\n.error {\n  background: #f56a79;\n}\n\n.success {\n  background: #557571;\n}\n\n#search-city-form,\n.results-section {\n  margin: 3rem auto;\n  width: 35%;\n  padding: 1rem 1.5rem;\n  border-radius: 0.4rem;\n  background: $white;\n}\n\nheader {\n  height: 60vh;\n}\n\ninput {\n  width: 100%;\n  margin: 0.3rem 0;\n  padding: 1rem 1.5rem;\n  font-size: 1.1rem;\n  border-radius: 0.4rem;\n  border: 1px solid #c9c4c4;\n  cursor: pointer;\n  color: rgb(152, 148, 148);\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 11px 0 #c9c4c4;\n    padding: 1rem 1.5rem;\n    color: rgb(152, 148, 148);\n  }\n\n  &:hover {\n    background: #f5fcfc;\n  }\n}\n\n#form-search {\n  background: #8ea3fc;\n  border: 0;\n  color: $white;\n}\n\n.country-name {\n  font-size: 2.5rem;\n}\n\n.btn-container {\n  width: 50%;\n  margin: 3rem 33%;\n  display: none;\n}\n\n.btn-temp2 {\n  display: none;\n}\n\n.results-section {\n  background: #8ea3fc;\n  margin: 5rem auto;\n  color: #fff;\n  display: none;\n\n  span,\n  p {\n    font-size: 1.3rem;\n    text-transform: capitalize;\n  }\n}\n\n#country-flag {\n  margin-left: 20rem;\n  width: 3rem;\n}\n\n#country-image {\n  width: 7rem;\n  height: 5rem;\n}\n\n#temperature {\n  font-size: 5rem;\n\n  &::after {\n    content: \"\\00b0\";\n  }\n}\n\n.btn {\n  text-align: center;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  background-image: linear-gradient(to bottom, #b0a4ff, #806ef8);\n  color: $white;\n  border: 0;\n  font-size: 1rem;\n  outline: none;\n}\n\n.page-title {\n  color: #8e929b;\n  margin: 3rem auto 2rem auto;\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(t.push(a.value),!n||t.length!==n);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),A="/*# ".concat(s," */"),d=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([A]).join("\n")}return[i].join("\n")}},379:(e,n,t)=>{var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function a(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],o=0;o<e.length;o++){var c=e[o],s=n.base?c[0]+n.base:c[0],A=t[s]||0,d="".concat(s," ").concat(A);t[s]=A+1;var l=a(d),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==l?(i[l].references++,i[l].updater(u)):i.push({identifier:d,updater:C(u,n),references:1}),r.push(d)}return r}function s(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var A,d=(A=[],function(e,n){return A[e]=n,A.filter(Boolean).join("\n")});function l(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function u(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,f=0;function C(e,n){var t,r,o;if(n.singleton){var i=f++;t=m||(m=s(n)),r=l.bind(null,t,i,!1),o=l.bind(null,t,i,!0)}else t=s(n),r=u.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var s=c(e,n),A=0;A<t.length;A++){var d=a(t[A]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}t=s}}}}},n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(192);n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const o=document.querySelector(".country-name"),i=document.getElementById("country-flag"),a=document.querySelector("#country-image"),c=document.getElementById("date"),s=document.getElementById("weather-icon"),A=document.querySelector(".description"),d=document.getElementById("temperature"),l=document.getElementById("feels-like"),u=document.querySelector("button"),m=document.querySelector(".results-section"),f=document.querySelector(".btn-temp"),C=document.querySelector(".btn-temp2"),p=document.querySelector(".btn-container");u.addEventListener("click",(()=>{window.location.reload()}));const g=(e,n)=>{const t=document.createElement("div");t.className=`alert ${n}`,t.appendChild(document.createTextNode(e));const r=document.querySelector("body"),o=document.querySelector("h1");r.insertBefore(t,o),setTimeout((()=>{document.querySelector(".alert").remove()}),3e3)},h=document.querySelector("form"),B=document.querySelector("body"),b=document.querySelector("header");h.addEventListener("submit",(e=>{e.preventDefault();const n=document.querySelector("#city-name").value;""===n?g("please enter a valid city","error"):(B.removeChild(b),new class{constructor(e){this.apiKey="1a47b95fce72843fb086b93f9d54e7b8",this.city=e}async getWeatherInfo(){try{return(await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.city}&appid=${this.apiKey}`)).json()}catch(e){throw console.error(e),e}}changeCity(e){this.city=e}}(n).getWeatherInfo().then((e=>{200===e.cod?((({weather:e,main:n,sys:t,name:r})=>{p.id="show",m.id="show",i.src=`https://www.countryflags.io/${t.country}/shiny/64.png`,a.src=`https://source.unsplash.com/1600x900/?${t.country} city`,c.innerText=(new Date).toDateString(),o.innerText=r,s.src=`https://openweathermap.org/img/w/${e[0].icon}.png`,A.innerText=e[0].description,d.innerText=Math.trunc(n.temp-273.15),l.innerText=Math.trunc(n.feels_like-273.15),f.addEventListener("click",(()=>{d.innerText=Math.trunc(1.8*(n.temp-273.15)+32),l.innerText=Math.trunc(1.8*(n.feels_like-273.15)+32),f.id="hide",C.id="inline"})),C.addEventListener("click",(()=>{d.innerText=Math.trunc(n.temp-273.15),l.innerText=Math.trunc(n.feels_like-273.15),f.id="inline",C.id="hide"}))})(e),g("Success! Here are your results","success")):g("There was an error, please select a new city","error")})))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,